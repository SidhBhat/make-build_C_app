#!/usr/bin/make -f
# Set environment variables

# this makefile follows the below conventions for variables denoting files and directories
# all directory names must end with a terminal '/' character
# file names never end in terminal '/' character


#===================================================

SHELL = /bin/bash

# set this variable to any value to include shared libraries
SHARED =
ifdef SHARED
override SHARED = true
endif

#===================================================
# Compile commands
#===================================================
CC       = gcc
CLIBS    =
CFLAGS   = -g -O -Wall
INCLUDES =
ifdef SHARED
RPATH    =
endif
#====================================================
# set cflags and cflags_exec
ifdef SHARED
ifneq ($(strip $(filter -pie,$(CFLAGS))),)
$(error -pie is for executable only do mot specify it for CFLAGS)
endif
override cflags := $(filter-out -pic -fpic -Fpic -FPIC -fPIC,$(CFLAGS))
ifeq ($(strip $(filter -fpie -Fpie -FPIE -fPIE,$(cflags))),)
override cflags += -fpie
endif
override cflags_exec := $(cflags) -pie
else
override cflags := $(filter-out -pic -fpic -Fpic -FPIC -fPIC -pie -fpie -Fpie -FPIE -fpie,$(CFLAGS))
override cflags_exec := $(cflags)
endif
#===================================================
# Build Directories
#===================================================
srcdir     = src/
buildir    = build/
#===================================================
 prog_name = mainc
#===================================================
# Source and target objects
#===================================================
override SRCS      = $(wildcard $(srcdir)*.c)
override OBJS      = $(patsubst $(srcdir)%.c,$(buildir)%.c.o,$(SRCS))
override MKS       = $(patsubst $(srcdir)%.c,$(buildir)%.mk,$(SRCS))
#=====================================================

build: $(buildir)$(prog_name)
.PHONY: build

debug:
	@echo    "#-------------------------------------------#"
	@echo -e "\e[35mSource Files     \e[0m: $(SRCS)"
	@echo -e "\e[35mMake Files       \e[0m: $(MKS)"
	@echo -e "\e[35mObject Files     \e[0m: $(OBJS)"
	@echo -e "\e[35mSHARED     \e[0m: $(SHARED)"
	@echo -e "\e[35mCMD Goals  \e[0m: $(MAKECMDGOALS)"
	@echo -e "\e[35mMakeflags  \e[0m: $(MAKEFLAGS)"
	@echo -e "\e[35mClibs      \e[0m: $(CLIBS)"
	@echo -e "\e[35mCFLAGS     \e[0m: $(CFLAGS)"
	@echo -e "\e[35mComputed cflags     \e[0m: $(cflags)"
	@echo -e "\e[35mComputed cflags_exec\e[0m: $(cflags_exec)"
	@echo -e "\e[35mClibs      \e[0m: $(CLIBS)"
	@echo -e "\e[35mTest Var   \e[0m: $(prog_name)"
.PHONY:debug

empty:
.PHONY: empty

#=====================================================

ifdef INSTALLMODE
$(buildir)$(prog_name): $(OBJS) empty
else
# any file in COMPILESTAMP is changed they will cause a recompile
$(buildir)$(prog_name): $(OBJS) $(COMPILESTAMP)
endif
ifdef SHARED
	$(CC) $(cflags_exec) -o $@ $(INCLUDES) -Wl,-rpath="$(RPATH)" $(OBJS) $(CLIBS)
else
	$(CC) $(cflags_exec) -o $@ $(INCLUDES) $(OBJS) $(CLIBS)
endif

# rule to create build make files
$(buildir)%.mk : $(srcdir)%.c
	@mkdir -p $(@D)
	@$(CC) -M $< -MT $(buildir)$*.c.o | awk '{ print $$0 } END { printf("\t$$(CC) $$(cflags) -c -o $$@ $$<")}' > $@
	@echo -e "\e[32mCreating Makefile \"$@\"\e[0m..."

ifneq ($(strip $(filter build $(buildir)$(prog_name) $(OBJS),$(MAKECMDGOALS))),)
include $(MKS)
else
ifeq ($(MAKECMDGOALS),)
include $(MKS)
endif
endif

#=====================================================

clean:
	rm -rf $(buildir)
.PHONY:clean
